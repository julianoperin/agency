{"version":3,"sources":["js/typewriter.js"],"names":["TypeWriter","txtElement","words","wait","txt","wordIndex","parseInt","type","isDeleting","current","length","fullTxt","substring","innerHTML","typeSpeed","setTimeout","document","addEventListener","init","querySelector","JSON","parse","getAttribute"],"mappings":";;;;;;IAAMA;AACJ,sBAAYC,UAAZ,EAAwBC,KAAxB,EAA4C;AAAA,QAAbC,IAAa,uEAAN,IAAM;;AAAA;;AAC1C,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKE,GAAL,GAAW,EAAX;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKF,IAAL,GAAYG,QAAQ,CAACH,IAAD,EAAO,EAAP,CAApB;AACA,SAAKI,IAAL;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACD;;;;2BAEM;AAAA;;AACL;AACA,UAAMC,OAAO,GAAG,KAAKJ,SAAL,GAAiB,KAAKH,KAAL,CAAWQ,MAA5C,CAFK,CAGL;;AACA,UAAMC,OAAO,GAAG,KAAKT,KAAL,CAAWO,OAAX,CAAhB,CAJK,CAML;;AACA,UAAI,KAAKD,UAAT,EAAqB;AACnB;AACA,aAAKJ,GAAL,GAAWO,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,KAAKR,GAAL,CAASM,MAAT,GAAkB,CAAvC,CAAX;AACD,OAHD,MAGO;AACL;AACA,aAAKN,GAAL,GAAWO,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,KAAKR,GAAL,CAASM,MAAT,GAAkB,CAAvC,CAAX;AACD,OAbI,CAeL;;;AACA,WAAKT,UAAL,CAAgBY,SAAhB,iCAAiD,KAAKT,GAAtD,aAhBK,CAkBL;;AACA,UAAIU,SAAS,GAAG,GAAhB;;AAEA,UAAI,KAAKN,UAAT,EAAqB;AACnBM,QAAAA,SAAS,IAAI,CAAb;AACD,OAvBI,CAyBL;;;AACA,UAAI,CAAC,KAAKN,UAAN,IAAoB,KAAKJ,GAAL,KAAaO,OAArC,EAA8C;AAC5C;AACAG,QAAAA,SAAS,GAAG,KAAKX,IAAjB,CAF4C,CAG5C;;AACA,aAAKK,UAAL,GAAkB,IAAlB;AACD,OALD,MAKO,IAAI,KAAKA,UAAL,IAAmB,KAAKJ,GAAL,KAAa,EAApC,EAAwC;AAC7C,aAAKI,UAAL,GAAkB,KAAlB,CAD6C,CAE7C;;AACA,aAAKH,SAAL,GAH6C,CAI7C;;AACAS,QAAAA,SAAS,GAAG,GAAZ;AACD;;AAEDC,MAAAA,UAAU,CAAC;AAAA,eAAM,KAAI,CAACR,IAAL,EAAN;AAAA,OAAD,EAAoBO,SAApB,CAAV;AACD;;;;KAGH;;;AACAE,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,IAA9C,GAEA;;AACA,SAASA,IAAT,GAAgB;AACd,MAAMjB,UAAU,GAAGe,QAAQ,CAACG,aAAT,CAAuB,WAAvB,CAAnB;AACA,MAAMjB,KAAK,GAAGkB,IAAI,CAACC,KAAL,CAAWpB,UAAU,CAACqB,YAAX,CAAwB,YAAxB,CAAX,CAAd;AACA,MAAMnB,IAAI,GAAGF,UAAU,CAACqB,YAAX,CAAwB,WAAxB,CAAb,CAHc,CAId;;AACA,MAAItB,UAAJ,CAAeC,UAAf,EAA2BC,KAA3B,EAAkCC,IAAlC;AACD","file":"typewriter.58932f2a.js","sourceRoot":"../src","sourcesContent":["class TypeWriter {\r\n  constructor(txtElement, words, wait = 3000) {\r\n    this.txtElement = txtElement;\r\n    this.words = words;\r\n    this.txt = '';\r\n    this.wordIndex = 0;\r\n    this.wait = parseInt(wait, 10);\r\n    this.type();\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  type() {\r\n    // Current index of word\r\n    const current = this.wordIndex % this.words.length;\r\n    // Get full text of current word\r\n    const fullTxt = this.words[current];\r\n\r\n    // Check if deleting\r\n    if (this.isDeleting) {\r\n      // Remove char\r\n      this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n    } else {\r\n      // Add char\r\n      this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n    }\r\n\r\n    // Insert txt into element\r\n    this.txtElement.innerHTML = `<span class=\"txt\">${this.txt}</span>`;\r\n\r\n    // Initial Type Speed\r\n    let typeSpeed = 300;\r\n\r\n    if (this.isDeleting) {\r\n      typeSpeed /= 2;\r\n    }\r\n\r\n    // If word is complete\r\n    if (!this.isDeleting && this.txt === fullTxt) {\r\n      // Make pause at end\r\n      typeSpeed = this.wait;\r\n      // Set delete to true\r\n      this.isDeleting = true;\r\n    } else if (this.isDeleting && this.txt === '') {\r\n      this.isDeleting = false;\r\n      // Move to next word\r\n      this.wordIndex++;\r\n      // Pause before start typing\r\n      typeSpeed = 500;\r\n    }\r\n\r\n    setTimeout(() => this.type(), typeSpeed);\r\n  }\r\n}\r\n\r\n// Init On DOM Load\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n\r\n// Init App\r\nfunction init() {\r\n  const txtElement = document.querySelector('.txt-type');\r\n  const words = JSON.parse(txtElement.getAttribute('data-words'));\r\n  const wait = txtElement.getAttribute('data-wait');\r\n  // Init TypeWriter\r\n  new TypeWriter(txtElement, words, wait);\r\n}\r\n"]}