{"version":3,"sources":["js/typewriter.js"],"names":["TypeWriter","txtElement","words","wait","txt","wordIndex","parseInt","type","isDeleting","current","length","fullTxt","substring","innerHTML","typeSpeed","setTimeout","init","document","querySelector","JSON","parse","getAttribute","addEventListener"],"mappings":";AAgEC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAhEKA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,EAAYC,GAAOC,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAAM,EAAA,KAAA,GACrCF,KAAAA,WAAaA,EACbC,KAAAA,MAAQA,EACRE,KAAAA,IAAM,GACNC,KAAAA,UAAY,EACZF,KAAAA,KAAOG,SAASH,EAAM,IACtBI,KAAAA,OACAC,KAAAA,YAAa,EAwDrB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OArDQ,MAAA,WAAA,IAAA,EAAA,KAECC,EAAU,KAAKJ,UAAY,KAAKH,MAAMQ,OAEtCC,EAAU,KAAKT,MAAMO,GAGvB,KAAKD,WAEFJ,KAAAA,IAAMO,EAAQC,UAAU,EAAG,KAAKR,IAAIM,OAAS,GAG7CN,KAAAA,IAAMO,EAAQC,UAAU,EAAG,KAAKR,IAAIM,OAAS,GAI/CT,KAAAA,WAAWY,UAAiC,qBAAA,OAAA,KAAKT,IAhBjD,WAmBDU,IAAAA,EAAY,IAEZ,KAAKN,aACPM,GAAa,GAIV,KAAKN,YAAc,KAAKJ,MAAQO,EAK1B,KAAKH,YAA2B,KAAb,KAAKJ,MAC5BI,KAAAA,YAAa,EAEbH,KAAAA,YAELS,EAAY,MARZA,EAAY,KAAKX,KAEZK,KAAAA,YAAa,GASpBO,WAAW,WAAM,OAAA,EAAKR,QAAQO,OAcjC,EAhEKd,GA0DN,SAASgB,IACDf,IAAAA,EAAagB,SAASC,cAAc,aACpChB,EAAQiB,KAAKC,MAAMnB,EAAWoB,aAAa,eAC3ClB,EAAOF,EAAWoB,aAAa,aAEjCrB,IAAAA,EAAWC,EAAYC,EAAOC,GARpCc,SAASK,iBAAiB,mBAAoBN","file":"typewriter.3a50512c.js","sourceRoot":"../src","sourcesContent":["class TypeWriter {\r\n  constructor(txtElement, words, wait = 3000) {\r\n    this.txtElement = txtElement;\r\n    this.words = words;\r\n    this.txt = '';\r\n    this.wordIndex = 0;\r\n    this.wait = parseInt(wait, 10);\r\n    this.type();\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  type() {\r\n    // Current index of word\r\n    const current = this.wordIndex % this.words.length;\r\n    // Get full text of current word\r\n    const fullTxt = this.words[current];\r\n\r\n    // Check if deleting\r\n    if (this.isDeleting) {\r\n      // Remove char\r\n      this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n    } else {\r\n      // Add char\r\n      this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n    }\r\n\r\n    // Insert txt into element\r\n    this.txtElement.innerHTML = `<span class=\"txt\">${this.txt}</span>`;\r\n\r\n    // Initial Type Speed\r\n    let typeSpeed = 300;\r\n\r\n    if (this.isDeleting) {\r\n      typeSpeed /= 2;\r\n    }\r\n\r\n    // If word is complete\r\n    if (!this.isDeleting && this.txt === fullTxt) {\r\n      // Make pause at end\r\n      typeSpeed = this.wait;\r\n      // Set delete to true\r\n      this.isDeleting = true;\r\n    } else if (this.isDeleting && this.txt === '') {\r\n      this.isDeleting = false;\r\n      // Move to next word\r\n      this.wordIndex++;\r\n      // Pause before start typing\r\n      typeSpeed = 500;\r\n    }\r\n\r\n    setTimeout(() => this.type(), typeSpeed);\r\n  }\r\n}\r\n\r\n// Init On DOM Load\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n\r\n// Init App\r\nfunction init() {\r\n  const txtElement = document.querySelector('.txt-type');\r\n  const words = JSON.parse(txtElement.getAttribute('data-words'));\r\n  const wait = txtElement.getAttribute('data-wait');\r\n  // Init TypeWriter\r\n  new TypeWriter(txtElement, words, wait);\r\n}\r\n"]}